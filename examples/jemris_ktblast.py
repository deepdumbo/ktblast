'''Example using JEMRIS data.

Notes
-----
JEMRIS data can be generated by using script found here:
http://www.jemris.org/ug_example_ktblast.html. The .MAT files are
created by saving the output of JEMRIS from the MATLAB workspace.

If you're not into installing and running all the JEMRIS and MATLAB
stuff, you can find the .MAT files here:
https://www.dropbox.com/sh/4tjd1q2uonrgtzs/AADjIIbyIiL5ilg2UnXh5V1ra?dl=0
'''

import numpy as np
from scipy.io import loadmat
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

from ktblast import ktblast

if __name__ == '__main__':

    # Get aliased data
    xf_aliased = loadmat('data/xf_aliased.mat')['xf_aliased']
    sx, sy, st = xf_aliased.shape[:]
    kspace = np.fft.fft2(np.fft.ifft(np.fft.fftshift(
        xf_aliased, axes=-1), axis=-1), axes=(0, 1))

    # Load prior
    xf_prior = loadmat('data/xf_prior.mat')['xf_prior']
    calib = np.fft.fft2(np.fft.ifft(np.fft.fftshift(
        xf_prior, axes=-1), axis=-1), axes=(0, 1))

    # Run k-t BLAST reconstruction -- we'll need noise statistics,
    # so choose a single line in measured x-f space that's not moving
    lin = np.squeeze(xf_aliased[0, :, 1])
    psi = np.cov(lin)
    recon = ktblast(kspace, calib, psi=psi, R=None, time_axis=-1)

    # Compare to JEMRIS output
    recon_jemris = np.fft.fftshift(np.fft.ifft(np.fft.fftshift(
        loadmat('data/xf_ktblast.mat')['xf_ktblast'],
        axes=-1), axis=-1), axes=(0, 1, 2))
    assert np.allclose(np.abs(recon), np.abs(recon_jemris), atol=1e-4)

    # Some code to look at the animation
    fig = plt.figure()
    ax = plt.imshow(np.abs(recon[..., 0]), cmap='gray')

    def init():
        '''Initialize ax data.'''
        ax.set_array(np.abs(recon[..., 0]))
        return(ax,)

    def animate(frame):
        '''Update frame.'''
        ax.set_array(np.abs(recon[..., frame]))
        return(ax,)

    anim = FuncAnimation(
        fig, animate, init_func=init, frames=recon.shape[-1],
        interval=40, blit=True)
    plt.show()
